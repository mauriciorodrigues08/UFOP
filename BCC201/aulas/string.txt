CADEIAS DE CARACTERES - Strings
- em C, uma string é implementada como um array de char
- esse array sempre terminará com o caractere /0
  . o /0 indica o final da string
  . note que para representar uma string de 10 caracteres é necessário um array de 11 posições
- uma string pode ser inicializada de maneira facil:
  char nome[] = "nome";

BIBLIOTECA <string.h>
- strlen()
    . abreviação para string lenght
    . utilizada para calcular o tamanho de uma String
    . a função percorrerá o array de caracteres até encontrar o /0 e somando a qtd de caracteres

- char *strcpy(char x[], char y[]);
  . abreviação para string copy
  . copia a string x (inclusive o /0) no espaço alocado para y
  . note que cabe ao usuário garantir que o espaço alocado a y possua pelo menos strlen(x) + 1
  . retorna o endereço de memória de x

- char *strcat(char x[], char y[]);
  . abreviação para string concatenation
  . concatena as strings x e y
  . retorna o endereço da string resultante, ou seja, o endereço de x
  . note que cabe ao usuário garantir que o espaço alocado a x seja suficiente para comportar strlen(y) adicionais

- int strcmp(char x[], char y[]);
  . abreviação para string compare
  . compara lexicograficamente as strings
  . retornará um nº negativo se y vir antes de x
  . retornará 0 se y = x
  . retornará um nº positivo se x vir antes de y
  . em resumo, compara a ordem alfabética das strings

MANIPULAÇÃO DE Strings
- utilização do %s
  . ao utilizar o formato %s, a seguinte sequência ocorre:
    1. o conteúdo do endereço de memória apontado pelo vetor é acessado
    2. se o conteúdo for "/0" o algoritmo é encerrado
    3. caso contrário, o caracter é impresso e o passo 2 é repetido considerando o prox endereço de memória
    4 essa sequência é executada até o caracter /0 ser encontrado

- leitura de strings
  . até podemos utilizar o scanf() para ler strings, porém ao encontrar um espaço a leitura será interrompida
  . uma alternativa então é utilizar as funções abaixo:
    gets(x) - lê a entrada até uma quebra de linha (\n) ser identificada e armazena na string x
    *obs: o gets() deve ser evitado (função deprecated)

    fgets(x, n, stdin) - lê a entrada até encontrar a quebra de linha (\n) ou até o limite (n) de caracteres ser atingido e armazena na string x
    *obs: o fgets() incluirá o "\n" na string x

PARÂMETROS DA FUNÇÃO MAIN
- a função main() pode receber parâmetros
- são eles:
  . int argc: contador de argumentos
  . char **argv: valor dos argumentos
  . note que o **argv é um vetor que armazena strings (também pode ser escrito char *argv[])
  .ex:
    int main(int argc, char *argv[]);